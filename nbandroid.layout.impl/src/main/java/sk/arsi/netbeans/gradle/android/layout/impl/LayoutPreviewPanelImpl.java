/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.arsi.netbeans.gradle.android.layout.impl;

import android.annotation.NonNull;
import com.android.ide.common.rendering.api.LayoutLog;
import com.android.ide.common.rendering.api.RenderSession;
import com.android.ide.common.rendering.api.Result;
import com.android.ide.common.rendering.api.SessionParams;
import com.android.ide.common.resources.FrameworkResources;
import com.android.ide.common.resources.ResourceItem;
import com.android.ide.common.resources.ResourceRepository;
import com.android.ide.common.resources.ResourceResolver;
import com.android.ide.common.resources.configuration.FolderConfiguration;
import com.android.io.FolderWrapper;
import com.android.layoutlib.bridge.android.RenderParamsFlags;
import com.android.resources.Density;
import com.android.resources.Keyboard;
import com.android.resources.KeyboardState;
import com.android.resources.Navigation;
import com.android.resources.ScreenOrientation;
import com.android.resources.ScreenRatio;
import com.android.resources.ScreenSize;
import com.android.resources.TouchScreen;
import com.android.tools.nbandroid.layoutlib.ConfigGenerator;
import com.android.tools.nbandroid.layoutlib.LayoutLibrary;
import com.android.tools.nbandroid.layoutlib.LayoutLibraryLoader;
import com.android.tools.nbandroid.layoutlib.LogWrapper;
import com.android.tools.nbandroid.layoutlib.RenderingException;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.SwingUtilities;
import org.openide.util.RequestProcessor;
import sk.arsi.netbeans.gradle.android.layout.spi.LayoutPreviewPanel;

/**
 *
 * @author arsi
 */
public class LayoutPreviewPanelImpl extends LayoutPreviewPanel implements Runnable, ComponentListener {

    private BufferedImage image = null;
    private final int dpi;
    private LayoutLibrary layoutLibrary;
    private FrameworkResources sFrameworkRepo;
    private ResourceRepository sProjectResources;
    private final AtomicBoolean refreshLock = new AtomicBoolean(false);
    private final RequestProcessor RP = new RequestProcessor(LayoutPreviewPanel.class);

    /**
     * Creates new form LayoutPreviewPanelImpl1
     */
    public LayoutPreviewPanelImpl() {
        initComponents();
        dpi = 0;
    }

    public LayoutPreviewPanelImpl(File platformFolder, File layoutFile, File appResFolder, String themeName) {
        super(platformFolder, layoutFile, appResFolder, themeName);
        initComponents();
        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
        dpi = Toolkit.getDefaultToolkit().getScreenResolution();
        try {
            layoutLibrary = LayoutLibraryLoader.load(platformFolder);
        } catch (RenderingException | IOException ex) {
            Logger.getLogger(LayoutPreviewPanelImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        addComponentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        label = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        label.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label.setText(org.openide.util.NbBundle.getMessage(LayoutPreviewPanelImpl.class, "LayoutPreviewPanelImpl.label.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(label, gridBagConstraints);

        progress.setIndeterminate(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel1.add(progress, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setImage(BufferedImage image) {
        this.image = image;
        setPreferredSize(new Dimension(new Dimension(image.getWidth(), image.getHeight())));
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                updateUI();
            }
        };
        SwingUtilities.invokeLater(runnable);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (image != null) {
            g.drawImage(image, 0, 0, this); // see javadoc for more info on the parameters
        }


    }

    private ConfigGenerator getCurrentConfig() {
        ConfigGenerator current = new ConfigGenerator()
                .setScreenHeight(getHeight())
                .setScreenWidth(getWidth())
                .setXdpi(dpi)
                .setYdpi(dpi)
                .setOrientation(ScreenOrientation.PORTRAIT)
                .setDensity(Density.XXHIGH)
                .setRatio(ScreenRatio.NOTLONG)
                .setSize(ScreenSize.NORMAL)
                .setKeyboard(Keyboard.NOKEY)
                .setTouchScreen(TouchScreen.FINGER)
                .setKeyboardState(KeyboardState.SOFT)
                .setSoftButtons(true)
                .setNavigation(Navigation.NONAV);
        return current;
    }

    @Override
    public void run() {
        refreshLock.set(false);
        label.setText("Loading...");
        label.setVisible(true);
        progress.setVisible(true);
        try {
            RenderSession session = layoutLibrary.createSession(getSessionParams(platformFolder, new LayoutPullParser(layoutFile), getCurrentConfig(), new LayoutLibTestCallback(new LogWrapper()), themeName, true, SessionParams.RenderingMode.NORMAL, 27));
            Result renderResult = session.render();
            if (renderResult.getException() != null) {
                renderResult.getException().printStackTrace();
            }
            setImage(session.getImage());
            label.setVisible(false);
            progress.setVisible(false);
        } catch (Exception e) {
            label.setText("Error!");
            label.setVisible(true);
        }
    }

    protected SessionParams getSessionParams(File platformFolder, LayoutPullParser layoutParser,
            ConfigGenerator configGenerator, LayoutLibTestCallback layoutLibCallback,
            String themeName, boolean isProjectTheme, SessionParams.RenderingMode renderingMode,
            @SuppressWarnings("SameParameterValue") int targetSdk) {
        File data_dir = new File(platformFolder, "data");
        File res = new File(data_dir, "res");
        sFrameworkRepo = FrameworkResourcesCache.getOrCreateFrameworkResources(res);
        sProjectResources = new ResourceRepository(new FolderWrapper(appResFolder),
                false) {
            @NonNull
            @Override
            protected ResourceItem createResourceItem(@NonNull String name) {
                return new ResourceItem(name);
            }
        };
        sProjectResources.loadResources();
        FolderConfiguration config = configGenerator.getFolderConfig();
        ResourceResolver resourceResolver = ResourceResolver.create(sProjectResources.getConfiguredResources(config), sFrameworkRepo.getConfiguredResources(config), themeName, isProjectTheme);

        SessionParams sessionParams
                = new SessionParams(layoutParser, renderingMode, null /*used for caching*/,
                        configGenerator.getHardwareConfig(), resourceResolver, layoutLibCallback, 0,
                        targetSdk, new LayoutLog());
        sessionParams.setFlag(RenderParamsFlags.FLAG_DO_NOT_RENDER_ON_CREATE, true);
        sessionParams.setAssetRepository(new TestAssetRepository());
        return sessionParams;
    }

    @Override
    public void componentResized(ComponentEvent e) {
        if (refreshLock.compareAndSet(false, true)) {
            RP.execute(LayoutPreviewPanelImpl.this);
        }
    }

    @Override
    public void componentMoved(ComponentEvent e) {
    }

    @Override
    public void componentShown(ComponentEvent e) {
    }

    @Override
    public void componentHidden(ComponentEvent e) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label;
    private javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables
}
