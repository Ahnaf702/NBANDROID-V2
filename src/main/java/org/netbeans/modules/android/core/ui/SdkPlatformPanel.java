/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.android.core.ui;

import com.android.repository.api.UpdatablePackage;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.tree.DefaultTreeModel;
import org.nbandroid.netbeans.gradle.v2.sdk.AndroidVersionDecorator;
import org.nbandroid.netbeans.gradle.v2.sdk.PackageRoot;
import org.nbandroid.netbeans.gradle.v2.sdk.SdkManager;
import org.nbandroid.netbeans.gradle.v2.sdk.SdkPlatformChangeListener;
import org.nbandroid.netbeans.gradle.v2.sdk.UpdatablePackageDecorator;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.OutlineModel;
import org.netbeans.swing.outline.RenderDataProvider;
import org.netbeans.swing.outline.RowModel;
import org.openide.explorer.ExplorerManager;
import org.openide.windows.WindowManager;

/**
 *
 * @author arsi
 */
public class SdkPlatformPanel extends javax.swing.JPanel implements ExplorerManager.Provider, SdkPlatformChangeListener {

    private final ExplorerManager explorerManager = new ExplorerManager();
    private SdkManager manager = null;

    /**
     * Creates new form SdkPlatformPanel
     */
    public SdkPlatformPanel() {
        initComponents();
    }

    public void connect(SdkManager manager) {
        this.manager = manager;
        if (manager != null) {
            manager.addSdkPlatformChangeListener(this);
        }
    }

    public void disconnect() {
        if (manager != null) {
            manager.removeSdkPlatformChangeListener(this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        packageTreeTableView = new org.netbeans.modules.android.core.ui.PackageTreeTableView();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(packageTreeTableView);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.netbeans.modules.android.core.ui.PackageTreeTableView packageTreeTableView;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private class PackageRenderer implements RenderDataProvider {

        @Override
        public java.awt.Color getBackground(Object o) {
            return null;
        }

        @Override
        public String getDisplayName(Object o) {
            return o.toString();
        }

        @Override
        public java.awt.Color getForeground(Object o) {
            return Color.BLACK;
        }

        @Override
        public javax.swing.Icon getIcon(Object o) {
            if (o instanceof UpdatablePackageDecorator) {
                UpdatablePackage aPackage = ((UpdatablePackageDecorator) o).getPackage();
                if (aPackage.isUpdate()) {
                    return new ImageIcon(IconProvider.IMG_UPDATE);
                } else if (aPackage.hasLocal()) {
                    return new ImageIcon(IconProvider.IMG_LOCAL);
                } else {
                    return new ImageIcon(IconProvider.IMG_REMOTE);
                }
            }
            return null;
        }

        @Override
        public String getTooltipText(Object o) {
            if (o instanceof UpdatablePackageDecorator) {
                UpdatablePackage aPackage = ((UpdatablePackageDecorator) o).getPackage();
                if (aPackage.isUpdate()) {
                    return "Update available:"+ aPackage.getRemote().getVersion().getMajor();
                } else if (aPackage.hasLocal()) {
                    return "Installed";
                } else {
                    return "Not installed";
                }
            }else{
                return o.toString();
            }
        }

        @Override
        public boolean isHtmlDisplayName(Object o) {
            return false;
        }
    }

    @Override
    public void packageListChanged(PackageRoot platformPackages) {
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                OutlineModel mdl = DefaultOutlineModel.createOutlineModel(new DefaultTreeModel(platformPackages), new RowModel() {
                    @Override
                    public int getColumnCount() {
                        return 2;
                    }

                    @Override
                    public Object getValueFor(Object node, int column) {
                        if (node instanceof AndroidVersionDecorator) {
                            return null;
                        } else if (node instanceof UpdatablePackageDecorator) {
                            switch (column) {
                                case 0: {
                                    return ((AndroidVersionDecorator) ((UpdatablePackageDecorator) node).getParent()).getVersion().getApiLevel();
                                }
                                case 1: {
                                    return ((UpdatablePackageDecorator) node).getPackage().getRepresentative().getVersion().getMajor();
                                }
                            }
                        }
                        return "Err";
                    }

                    @Override
                    public Class getColumnClass(int column) {
                        return String.class;
                    }

                    @Override
                    public boolean isCellEditable(Object node, int column) {
                        return false;
                    }

                    @Override
                    public void setValueFor(Object node, int column, Object value) {
                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public String getColumnName(int column) {
                        switch (column) {
                            case 0:
                                return "API";
                            case 1:
                                return "REV";
                            default:
                                return "Err";
                        }
                    }
                }, false, "Name");

                packageTreeTableView.setRenderDataProvider(new PackageRenderer());
                packageTreeTableView.setRootVisible(false);
                packageTreeTableView.setModel(mdl);
                packageTreeTableView.invalidate();
                packageTreeTableView.repaint();
            }
        };
        WindowManager.getDefault().invokeWhenUIReady(runnable);
    }

}
