/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.nbandroid.netbeans.gradle.v2.project.template.parameters;

import android.studio.imports.templates.Parameter;
import java.util.Map;
import java.util.Objects;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author arsi
 */
public class StringField extends javax.swing.JPanel implements ParameterValueProvider, DocumentListener {

    /**
     * Creates new form StringField
     */
    private final Parameter parameter;
    private final ParameterUpdateListener updateListener;

    public StringField(Parameter parameter, ParameterUpdateListener updateListener) {
        initComponents();
        this.parameter = parameter;
        textField.setText(parameter.initial);
        textField.setToolTipText(parameter.help);
        label.setText(parameter.name);
        this.updateListener = updateListener;
        textField.getDocument().addDocumentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new javax.swing.JTextField();
        label = new javax.swing.JLabel();

        label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(label, "zz");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label))
                .addGap(0, 1, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables

    @Override
    public Parameter getParameter() {
        return parameter;
    }

    @Override
    public Object getValue() {
        return textField.getText();
    }

    @Override
    public void update(Map<Parameter, Object> values) {
        textField.getDocument().removeDocumentListener(this);
         Object value = values.get(parameter);
        if ((value instanceof String) && !Objects.equals(value, textField.getText())) {
            textField.setText((String) value);
        }
        textField.getDocument().addDocumentListener(this);
    }

    @Override
    public void insertUpdate(DocumentEvent de) {
        updateListener.parameterUpdated(parameter, textField.getText());
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        updateListener.parameterUpdated(parameter, textField.getText());
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        updateListener.parameterUpdated(parameter, textField.getText());
    }
}
