/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.nbandroid.netbeans.gradle.v2.project.template;

import android.studio.imports.templates.Template;
import android.studio.imports.templates.TemplateManager;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import javax.swing.JPanel;
import static org.nbandroid.netbeans.gradle.v2.project.template.AndroidProjectTemplatePanelVisualAndroidSettings.PROP_MAX_BUILD_LEVEL;
import static org.nbandroid.netbeans.gradle.v2.project.template.AndroidProjectTemplatePanelVisualAndroidSettings.PROP_WEAR_PLATFORM;
import static org.nbandroid.netbeans.gradle.v2.project.template.AndroidProjectTemplatePanelVisualBasicSettings.PROP_PROJECT_SDK;
import org.nbandroid.netbeans.gradle.v2.sdk.AndroidPlatformInfo;
import org.nbandroid.netbeans.gradle.v2.sdk.AndroidSdk;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;

public class AndroidProjectTemplatePanelWearActivityAndroidSettings extends JPanel implements ItemListener, AndroidActivityTemplateHandler {

    private AndroidProjectTemplateWizardPanelWearActivityAndroidSettings panel;
    public static final String PROP_WEAR_TEMPLATE = "PROP_WEAR_TEMPLATE";
    private AndroidSdk androidSdk;
    private Template currentTemplate;
    public static final String PROP_WEAR_CONFIG = "PROP_WEAR_CONFIG";

    public AndroidProjectTemplatePanelWearActivityAndroidSettings(AndroidProjectTemplateWizardPanelWearActivityAndroidSettings panel) {
        initComponents();
        this.panel = panel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        activitysPanel = new javax.swing.JPanel();

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AndroidProjectTemplatePanelWearActivityAndroidSettings.class, "AndroidProjectTemplatePanelWearActivityAndroidSettings.jLabel3.text")); // NOI18N

        activitysPanel.setBackground(new java.awt.Color(255, 255, 255));
        activitysPanel.setLayout(new java.awt.GridLayout(0, 3));
        jScrollPane1.setViewportView(activitysPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(520, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel activitysPanel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
    }

    boolean valid(WizardDescriptor wizardDescriptor) {
        return true;
    }

    void store(WizardDescriptor d) {
        d.putProperty(PROP_WEAR_TEMPLATE, currentTemplate);
    }

    void read(WizardDescriptor settings) {
        settings.putProperty("WizardPanel_contentSelectedIndex", (int) 1);
        activitysPanel.removeAll();
        androidSdk = (AndroidSdk) settings.getProperty(PROP_PROJECT_SDK);
        currentTemplate = (Template) settings.getProperty(PROP_WEAR_TEMPLATE);
        if (settings.getProperty(PROP_WEAR_PLATFORM) instanceof AndroidPlatformInfo) {
            AndroidPlatformInfo platformInfo = (AndroidPlatformInfo) settings.getProperty(PROP_WEAR_PLATFORM);
            int minApiLevel = platformInfo.getAndroidVersion().getFeatureLevel();
            int buildApiLevel = (int) settings.getProperty(PROP_MAX_BUILD_LEVEL);
            List<Template> templates = TemplateManager.findActivityTemplates("Wear", minApiLevel, buildApiLevel);
            activitysPanel.add(new NoActivityForm(this));
            for (Template template : templates) {
                activitysPanel.add(new ActivityForm(template,this));
            }
            Component[] components = activitysPanel.getComponents();
            for (Component component : components) {
                if (component instanceof AndroidActivityTemplateProvider) {
                    ((AndroidActivityTemplateProvider) component).select(currentTemplate);
                }
            }
        }

    }

    @Override
    public void setCurrentTemplate(Template currentTemplate) {
        this.currentTemplate = currentTemplate;
        panel.fireChangeEvent();
    }


    @Override
    public void itemStateChanged(ItemEvent e) {
        panel.fireChangeEvent();
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    Template getCurrentTemplate() {
        return currentTemplate;
    }
}
