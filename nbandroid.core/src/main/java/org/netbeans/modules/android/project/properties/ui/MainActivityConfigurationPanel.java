/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.android.project.properties.ui;

import com.android.builder.model.AndroidProject;
import com.android.ide.common.xml.ManifestData;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.util.Collection;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import org.nbandroid.netbeans.gradle.api.AndroidProjects;
import org.netbeans.api.project.Project;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.WeakListeners;
import org.netbeans.modules.android.spi.MainActivityConfiguration;

/**
 *
 * @author arsi
 */
public class MainActivityConfigurationPanel extends javax.swing.JPanel implements LookupListener, ItemListener {

    private final MainActivityConfiguration activityConfiguration;
    private final Project project;
    private final Lookup.Result<AndroidProject> lookupResult;

    /**
     * Creates new form MainActivityConfigurationPanel
     */
    public MainActivityConfigurationPanel(MainActivityConfiguration activityConfiguration, Project project) {
        initComponents();
        this.activityConfiguration = activityConfiguration;
        this.project = project;
        lookupResult = project.getLookup().lookupResult(AndroidProject.class);
        lookupResult.addLookupListener(WeakListeners.create(LookupListener.class, this, lookupResult));
        useFromManifest.addItemListener(this);
        askBeforeLaunch.addItemListener(this);
        useFromManifest.setSelected(activityConfiguration.isUseFromManifest());
        askBeforeLaunch.setSelected(activityConfiguration.isAskBeforeLaunch());
        itemStateChanged(null);
        resultChanged(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        useFromManifest = new javax.swing.JCheckBox();
        askBeforeLaunch = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        customMainActivity = new javax.swing.JComboBox<>();

        org.openide.awt.Mnemonics.setLocalizedText(useFromManifest, org.openide.util.NbBundle.getMessage(MainActivityConfigurationPanel.class, "MainActivityConfigurationPanel.useFromManifest.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(askBeforeLaunch, org.openide.util.NbBundle.getMessage(MainActivityConfigurationPanel.class, "MainActivityConfigurationPanel.askBeforeLaunch.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MainActivityConfigurationPanel.class, "MainActivityConfigurationPanel.jLabel1.text")); // NOI18N

        customMainActivity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customMainActivity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useFromManifest)
                            .addComponent(askBeforeLaunch))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useFromManifest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(askBeforeLaunch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(customMainActivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox askBeforeLaunch;
    private javax.swing.JComboBox<String> customMainActivity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox useFromManifest;
    // End of variables declaration//GEN-END:variables

    public void store() {
        activityConfiguration.setUseFromManifest(useFromManifest.isSelected());
        activityConfiguration.setAskBeforeLaunch(askBeforeLaunch.isSelected());
        activityConfiguration.setMainActivity((String) customMainActivity.getSelectedItem());
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends AndroidProject> allInstances = lookupResult.allInstances();
        if(!allInstances.isEmpty()){
            AndroidProject androidProject = allInstances.iterator().next();
            File manifestFile = androidProject.getDefaultConfig().getSourceProvider().getManifestFile();
            try {
                ManifestData manifest = AndroidProjects.parseProjectManifest(new FileInputStream(manifestFile));
                ManifestData.Activity[] activities = manifest.getActivities();
                Vector<String> tmp = new Vector<>();
                for (ManifestData.Activity activitie : activities) {
                    tmp.add(activitie.getName());
                }
                customMainActivity.setModel(new DefaultComboBoxModel<>(tmp));
                customMainActivity.setSelectedItem(activityConfiguration.getMainActivity());
        } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
                customMainActivity.setModel(new DefaultComboBoxModel<>());
        }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (useFromManifest.isSelected()) {
            askBeforeLaunch.setEnabled(false);
            customMainActivity.setEnabled(false);
        } else if (askBeforeLaunch.isSelected()) {
            customMainActivity.setEnabled(false);
        } else {
            askBeforeLaunch.setEnabled(true);
            customMainActivity.setEnabled(true);
        }
    }
}
