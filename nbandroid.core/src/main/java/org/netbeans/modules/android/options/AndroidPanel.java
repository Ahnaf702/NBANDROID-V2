/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.android.options;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.modules.android.spi.AndroidOptionsSubPanel;
import org.netbeans.modules.android.spi.AndroidOptionsSubPanelProvider;
import org.openide.util.Lookup;

final class AndroidPanel extends javax.swing.JPanel implements ListSelectionListener {

    private final AndroidOptionsPanelController controller;
    private final List< AndroidOptionsSubPanel> panels = new ArrayList<>();
    private final SubPanelsModel subPanelsModel = new SubPanelsModel();

    AndroidPanel(AndroidOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        Collection<? extends AndroidOptionsSubPanelProvider> subPanelProviders = Lookup.getDefault().lookupAll(AndroidOptionsSubPanelProvider.class);
        for (AndroidOptionsSubPanelProvider subPanelProvider : subPanelProviders) {
            panels.add(subPanelProvider.getCategoryPanel(controller));
        }
        categories.setModel(subPanelsModel);
        categories.addListSelectionListener(this);
        if (!panels.isEmpty()) {
            categories.setSelectedIndex(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        categories = new javax.swing.JList<>();
        panel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AndroidPanel.class, "AndroidPanel.jLabel1.text")); // NOI18N

        jScrollPane1.setViewportView(categories);

        panel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        for (AndroidOptionsSubPanel p : panels) {
            p.load();
        }
    }

    void store() {
        for (AndroidOptionsSubPanel p : panels) {
            p.store();
        }
    }

    boolean valid() {
        for (AndroidOptionsSubPanel p : panels) {
            if (!p.valid()) {
                return false;
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<AndroidOptionsSubPanel> categories;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent e){
        panel.removeAll();
        panel.add(categories.getSelectedValue());
        panel.invalidate();
        panel.repaint();
    }


    private class SubPanelsModel implements ListModel<AndroidOptionsSubPanel>{

        @Override
        public int getSize() {
            return panels.size();
        }

        @Override
        public AndroidOptionsSubPanel getElementAt(int index) {
            return panels.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
        }

    }
}
