/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package nbandroid.gradle.impl;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.SwingUtilities;
import static nbandroid.gradle.impl.Bundle.ACT_Execute;
import nbandroid.gradle.spi.GradleCommandExecutor;
import nbandroid.gradle.spi.GradleCommandTemplate;
import nbandroid.gradle.spi.GradleUserTaskProvider;
import nbandroid.gradle.tooling.AndroidProjectInfo;
import nbandroid.gradle.tooling.TaskInfo;
import nbandroid.gradle.tooling.TaskInfoImpl;
import org.netbeans.api.annotations.common.StaticResource;
import org.netbeans.api.project.FileOwnerQuery;
import org.netbeans.api.project.Project;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;
import org.openide.util.RequestProcessor;
import org.openide.util.Utilities;

/**
 *
 * @author arsi
 */
public class GoalsPanel extends javax.swing.JPanel implements ExplorerManager.Provider, Runnable {

    private final transient ExplorerManager explorerManager = new ExplorerManager();
    private final BeanTreeView treeView;
    private AndroidProjectInfo gradleProject;
    private GradleUserTaskProvider gradleUserTaskProvider;

    /**
     * Creates new form GoalsPanel
     */
    public GoalsPanel() {
        initComponents();
        treeView = (BeanTreeView) scrollPane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    void showWaitNode() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                treeView.setRootVisible(true);
                explorerManager.setRootContext(createWaitNode());
            }
        });
    }

    void navigate(AndroidProjectInfo gradleProject, GradleUserTaskProvider gradleUserTaskProvider) {
        this.gradleProject = gradleProject;
        this.gradleUserTaskProvider = gradleUserTaskProvider;
        RequestProcessor.getDefault().execute(this);
    }

    void release() {
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    @Messages("LBL_Wait=Please Wait...")
    private static Node createWaitNode() {
        AbstractNode an = new AbstractNode(Children.LEAF);
        an.setIconBaseWithExtension(WAIT_GIF);
        an.setDisplayName(Bundle.LBL_Wait());
        return an;
    }

    @Override
    public void run() {
        final Children ch = Children.create(new PluginChildren(gradleProject, gradleUserTaskProvider), true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                treeView.setRootVisible(false);
                explorerManager.setRootContext(new AbstractNode(ch));
                treeView.expandAll();
            }
        });
    }

    private class PluginChildren extends ChildFactory<Object> {

        private final AndroidProjectInfo gradleProject;
        private final GradleUserTaskProvider gradleUserTaskProvider;

        public PluginChildren(AndroidProjectInfo gradleProject, GradleUserTaskProvider gradleUserTaskProvider) {
            this.gradleProject = gradleProject;
            this.gradleUserTaskProvider = gradleUserTaskProvider;
        }

        @Override
        protected boolean createKeys(List<Object> list) {
            List<String> groups = new ArrayList<>();
            groups.addAll(gradleProject.getProjectTasks().keySet());
            groups.remove("default");
            Collections.sort(groups);
            for (String group : groups) {
                List<TaskInfo> lsta = gradleProject.getProjectTasks().get(group);
                if (lsta != null) {
                    Collections.sort(lsta, new Comparator<TaskInfo>() {
                        @Override
                        public int compare(TaskInfo o1, TaskInfo o2) {
                            return o1.getName().compareTo(o2.getName());
                        }
                    });
                    for (TaskInfo taskInfo : lsta) {
                        list.add(taskInfo);
                    }
                }
            }
            List<TaskInfo> lst = gradleProject.getProjectTasks().get("default");
            if (lst != null) {
                Collections.sort(lst, new Comparator<TaskInfo>() {
                    @Override
                    public int compare(TaskInfo o1, TaskInfo o2) {
                        return o1.getName().compareTo(o2.getName());
                    }
                });
                for (TaskInfo taskInfo : lst) {
                    if (taskInfo.isEnabled()) {
                        if ("clean".equals(taskInfo.getName())) {
                            list.add(0, taskInfo);
                        } else {
                            list.add(taskInfo);
                        }
                    }
                }
            }
            makeDefaultTasks(list);
            if (gradleUserTaskProvider != null) {
                List<GradleCommandTemplate> gradleUserTasks = new ArrayList<>(gradleUserTaskProvider.getGradleUserTasks());
                Collections.reverse(gradleUserTasks);
                for (GradleCommandTemplate gradleUserTask : gradleUserTasks) {
                    list.add(0, gradleUserTask);
                }
            }
            return true;
        }

        private void makeDefaultTasks(List<Object> list) {
            TaskInfo clean = new TaskInfoImpl(true, "default", "clean", "clean", ":clean");
            if (!list.contains(clean)) {
                list.add(0, clean);
            }
        }

        protected @Override
        Node createNodeForKey(Object mdl) {
            if (mdl instanceof TaskInfo) {
                return new MojoNode((TaskInfo) mdl, gradleProject);
            } else if (mdl instanceof GradleCommandTemplate) {
                return new UserTaskNode((GradleCommandTemplate) mdl, gradleProject);
            } else {
                return Node.EMPTY;
            }
        }

    }

    private static class UserTaskNode extends AbstractNode {

        private final AndroidProjectInfo gradleProject;
        private final GradleCommandTemplate gradleTask;

        public UserTaskNode(GradleCommandTemplate gradleTask, AndroidProjectInfo gradleProject) {
            super(Children.LEAF);
            this.gradleProject = gradleProject;
            this.gradleTask = gradleTask;
            this.setShortDescription(getHtmlDescription());
        }

        private String getHtmlDescription() {
            String tmp = "<html><b>" + gradleTask.getDisplayName() + "</b><br>";
            tmp += "Tasks: <b>";
            for (String task : gradleTask.getTasks()) {
                tmp += task + " ";
            }
            tmp += "</b><br>";
            tmp += "GradleArguments: <b>";
            for (String task : gradleTask.getArguments()) {
                tmp += task + " ";
            }
            tmp += "</b><br>";
            tmp += "JVM Arguments: <b>";
            for (String task : gradleTask.getJvmArguments()) {
                tmp += task + " ";
            }
            tmp += "</b><br>";
            tmp += "</html>";
            return tmp;
        }

        @Override
        public String getHtmlDisplayName() {
            return gradleTask.getDisplayName();
        }

        @Override
        public Action[] getActions(boolean context) {
            return new Action[]{new RunUserGoalAction(gradleTask, gradleProject)};
        }

        @Override
        public Action getPreferredAction() {
            return new RunUserGoalAction(gradleTask, gradleProject);
        }

        @Override
        public Image getIcon(int type) {
            return ImageUtilities.loadImage(MOJO_USER_PNG);
        }
    }

    private static class MojoNode extends AbstractNode {

        private final AndroidProjectInfo gradleProject;
        private final TaskInfo gradleTask;

        public MojoNode(TaskInfo gradleTask, AndroidProjectInfo gradleProject) {
            super(Children.LEAF);
            this.gradleProject = gradleProject;
            this.gradleTask = gradleTask;
            this.setShortDescription(gradleTask.getDescription());
        }

        @Override
        public String getHtmlDisplayName() {
            String group = gradleTask.getGroup();
            if ("default".equals(group)) {
                group = "";
            } else {
                group += " ";
            }
            return "<html>" + group + "<b>" + gradleTask.getName() + "</b></html>";
        }

        @Override
        public Action[] getActions(boolean context) {
            return new Action[]{new RunGoalAction(gradleTask, gradleProject)};
        }

        @Override
        public Action getPreferredAction() {
            return new RunGoalAction(gradleTask, gradleProject);
        }

        @Override
        public Image getIcon(int type) {
            return ImageUtilities.loadImage(MOJO_PNG);
        }
    }

    @Messages("ACT_Execute=Execute Task")
    private static class RunUserGoalAction extends AbstractAction {

        private final GradleCommandTemplate gradleTask;
        private final AndroidProjectInfo gradleProject;

        public RunUserGoalAction(GradleCommandTemplate gradleTask, AndroidProjectInfo gradleProject) {
            this.gradleTask = gradleTask;
            this.gradleProject = gradleProject;
            putValue(Action.NAME, ACT_Execute());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Project project = FileOwnerQuery.getOwner(Utilities.toURI(new File(gradleProject.getProjectPath())));
            if (project != null) {
                GradleCommandExecutor executor = project.getLookup().lookup(GradleCommandExecutor.class);
                if (executor != null) {
                    executor.executeCommand(gradleTask);
                }
            }
        }

    }

    private static class RunGoalAction extends AbstractAction {

        private final TaskInfo gradleTask;
        private final AndroidProjectInfo gradleProject;

        public RunGoalAction(TaskInfo gradleTask, AndroidProjectInfo gradleProject) {
            this.gradleTask = gradleTask;
            this.gradleProject = gradleProject;
            putValue(Action.NAME, ACT_Execute());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Project project = FileOwnerQuery.getOwner(Utilities.toURI(new File(gradleProject.getProjectPath())));
            if (project != null) {
                new ExecuteGoal(project, gradleTask);
            }
        }

    }

    private static final @StaticResource
    String WAIT_GIF = "nbandroid/gradle/impl/wait.gif";

    private static final @StaticResource
    String MOJO_PNG = "nbandroid/gradle/impl/mojo.png";

    private static final @StaticResource
    String MOJO_USER_PNG = "nbandroid/gradle/impl/mojo_user.png";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
